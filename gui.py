"""
GUI –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ Google –¢–∞–±–ª–∏—Ü—ã
"""

import sys
import os
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, List, Tuple

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QTextEdit, QProgressBar, QLabel, QFrame,
    QMessageBox, QFileDialog, QLineEdit, QDialog, QDialogButtonBox,
    QTableWidget, QTableWidgetItem, QHeaderView, QComboBox,
    QGroupBox, QSpinBox, QTabWidget, QListWidget, QListWidgetItem,
    QSplitter, QCheckBox
)
from PySide6.QtCore import Qt, QThread, Signal, QMimeData, QTimer
from PySide6.QtGui import QDragEnterEvent, QDropEvent, QPalette, QColor, QFont, QIcon

from processor import ExcelToGoogleSheets
from config import BASE_DIR, create_sample_config
from dialogs import BatchMappingDialog, MappingDialog, DropArea

BASE_DIR = Path(__file__).resolve().parent


class WorkerThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    progress_update = Signal(int, int, str)  # current, total, sheet_name
    log_message = Signal(str)
    finished_successfully = Signal()
    error_occurred = Signal(str)
    
    def __init__(self, mode: str, **kwargs):
        super().__init__()
        self.mode = mode
        self.kwargs = kwargs
        self.processor = None
        
    def run(self):
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            self.processor = ExcelToGoogleSheets(str(BASE_DIR / "config.yaml"))
            
            if self.mode == "single":
                # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
                excel_path = self.kwargs['excel_path']
                google_sheet_url = self.kwargs['google_sheet_url']
                config = self.kwargs['config']
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                self.processor.update_config(
                    sheet_mapping=config['sheet_mapping'],
                    column_mapping=config['column_mapping'],
                    start_row=config['start_row']
                )
                
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º
                self.log_message.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º...")
                self.processor.connect_to_google_sheets(google_sheet_url)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
                self.processor.process_excel_file(
                    excel_path,
                    progress_callback=self.progress_update.emit,
                    log_callback=self.log_message.emit
                )
                
            elif self.mode == "batch":
                # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                file_mappings = self.kwargs['file_mappings']
                google_sheet_url = self.kwargs['google_sheet_url']
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
                self.processor.process_multiple_excel_files(
                    file_mappings,
                    google_sheet_url,
                    progress_callback=self.progress_update.emit,
                    log_callback=self.log_message.emit
                )
            
            self.finished_successfully.emit()
            
        except Exception as e:
            self.error_occurred.emit(str(e))




class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.processor = ExcelToGoogleSheets(str(BASE_DIR / "config.yaml"))
        self.worker_thread = None
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.single_file = None
        self.single_config = None
        self.batch_files = []
        self.batch_mappings = []
        
        self.init_ui()
        
    def init_ui(self):
        self.setWindowTitle("Excel ‚Üí Google –¢–∞–±–ª–∏—Ü—ã")
        self.setMinimumSize(800, 700)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout()
        layout.setSpacing(10)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ Google –¢–∞–±–ª–∏—Ü—ã")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title.setFont(title_font)
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É
        google_group = QGroupBox("Google –¢–∞–±–ª–∏—Ü–∞")
        google_layout = QVBoxLayout()
        
        self.google_url_input = QLineEdit()
        self.google_url_input.setPlaceholderText("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É...")
        self.google_url_input.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                font-size: 11pt;
                border: 2px solid #ddd;
                border-radius: 5px;
            }
            QLineEdit:focus {
                border-color: #4CAF50;
            }
        """)
        google_layout.addWidget(self.google_url_input)
        
        google_group.setLayout(google_layout)
        layout.addWidget(google_group)
        
        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #ddd;
                background-color: white;
            }
            QTabBar::tab {
                padding: 8px 16px;
                margin-right: 4px;
            }
            QTabBar::tab:selected {
                background-color: #4CAF50;
                color: white;
            }
        """)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        single_tab = QWidget()
        single_layout = QVBoxLayout()
        
        self.single_drop_area = DropArea(accept_multiple=False)
        self.single_drop_area.file_dropped.connect(self.on_single_file_dropped)
        single_layout.addWidget(self.single_drop_area)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        single_buttons = QHBoxLayout()
        
        self.single_mapping_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥")
        self.single_mapping_btn.setEnabled(False)
        self.single_mapping_btn.clicked.connect(self.configure_single_mapping)
        self.single_mapping_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                font-weight: bold;
                padding: 8px 16px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        self.single_process_btn = QPushButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.single_process_btn.setEnabled(False)
        self.single_process_btn.clicked.connect(self.start_single_processing)
        self.single_process_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                padding: 8px 16px;
                border-radius: 5px;
                font-size: 12pt;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        single_buttons.addWidget(self.single_mapping_btn)
        single_buttons.addWidget(self.single_process_btn)
        single_buttons.addStretch()
        
        single_layout.addLayout(single_buttons)
        single_tab.setLayout(single_layout)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        batch_tab = QWidget()
        batch_layout = QVBoxLayout()
        
        batch_info = QLabel("üîÑ –†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: –∫–∞–∂–¥—ã–π Excel —Ñ–∞–π–ª ‚Üí –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç Google")
        batch_info.setStyleSheet("color: #1976D2; font-weight: bold; margin-bottom: 10px;")
        batch_layout.addWidget(batch_info)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ —Å–ø–∏—Å–∫–∞
        splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - drag&drop
        left_widget = QWidget()
        left_layout = QVBoxLayout()
        left_layout.setContentsMargins(0, 0, 0, 0)
        
        self.batch_drop_area = DropArea(accept_multiple=True)
        self.batch_drop_area.files_dropped.connect(self.on_batch_files_dropped)
        left_layout.addWidget(self.batch_drop_area)
        
        left_widget.setLayout(left_layout)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        right_widget = QWidget()
        right_layout = QVBoxLayout()
        right_layout.setContentsMargins(0, 0, 0, 0)
        
        files_label = QLabel("üìÅ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        files_label.setStyleSheet("font-weight: bold;")
        right_layout.addWidget(files_label)
        
        self.files_list = QListWidget()
        self.files_list.setStyleSheet("""
            QListWidget {
                border: 1px solid #ddd;
                border-radius: 5px;
                background-color: #f9f9f9;
            }
        """)
        right_layout.addWidget(self.files_list)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        list_buttons = QHBoxLayout()
        
        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.clicked.connect(self.clear_batch_files)
        list_buttons.addWidget(clear_btn)
        
        remove_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        remove_btn.clicked.connect(self.remove_selected_files)
        list_buttons.addWidget(remove_btn)
        
        list_buttons.addStretch()
        right_layout.addLayout(list_buttons)
        
        right_widget.setLayout(right_layout)
        
        splitter.addWidget(left_widget)
        splitter.addWidget(right_widget)
        splitter.setSizes([400, 300])
        
        batch_layout.addWidget(splitter)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        batch_buttons = QHBoxLayout()
        
        self.batch_mapping_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤")
        self.batch_mapping_btn.setEnabled(False)
        self.batch_mapping_btn.clicked.connect(self.configure_batch_mapping)
        self.batch_mapping_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                font-weight: bold;
                padding: 8px 16px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        self.batch_process_btn = QPushButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.batch_process_btn.setEnabled(False)
        self.batch_process_btn.clicked.connect(self.start_batch_processing)
        self.batch_process_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                padding: 8px 16px;
                border-radius: 5px;
                font-size: 12pt;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        batch_buttons.addWidget(self.batch_mapping_btn)
        batch_buttons.addWidget(self.batch_process_btn)
        batch_buttons.addStretch()
        
        batch_layout.addLayout(batch_buttons)
        batch_tab.setLayout(batch_layout)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs.addTab(single_tab, "üìÑ –û–¥–∏–Ω —Ñ–∞–π–ª")
        self.tabs.addTab(batch_tab, "üìö –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        
        layout.addWidget(self.tabs)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setTextVisible(True)
        layout.addWidget(self.progress_bar)
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        self.status_label = QLabel("")
        self.status_label.setStyleSheet("color: #666; font-size: 10pt;")
        layout.addWidget(self.status_label)
        
        # –õ–æ–≥
        log_label = QLabel("üìã –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π:")
        log_label.setStyleSheet("font-weight: bold; margin-top: 10px;")
        layout.addWidget(log_label)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMaximumHeight(150)
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #f9f9f9;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 5px;
                font-family: 'Consolas', 'Monaco', monospace;
            }
        """)
        layout.addWidget(self.log_text)
        
        central_widget.setLayout(layout)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.google_url_input.textChanged.connect(self.check_ready_state)
        self.tabs.currentChanged.connect(self.check_ready_state)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è config.yaml
        self.check_config()
    
    def check_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        config_path = BASE_DIR / "config.yaml"
        if not config_path.exists():
            self.log_message("‚ö†Ô∏è –§–∞–π–ª config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä...")
            try:
                create_sample_config(config_path)
                self.log_message("‚úì –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä config.yaml")
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è config.yaml: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials.json
        creds_path = BASE_DIR / "credentials.json"
        if not creds_path.exists():
            self.log_message("‚ö†Ô∏è –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            self.log_message("‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Sheets API –∏ –ø–æ–ª—É—á–∏—Ç—å credentials.json")
    
    def check_ready_state(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ"""
        has_google_url = bool(self.google_url_input.text().strip())
        current_tab = self.tabs.currentIndex()
        
        if current_tab == 0:  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
            has_file = self.single_file is not None
            self.single_mapping_btn.setEnabled(has_google_url and has_file)
            self.single_process_btn.setEnabled(has_google_url and has_file and self.single_config is not None)
        else:  # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            has_files = len(self.batch_files) > 0
            self.batch_mapping_btn.setEnabled(has_google_url and has_files)
            self.batch_process_btn.setEnabled(has_google_url and has_files and len(self.batch_mappings) > 0)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    def on_single_file_dropped(self, file_path: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.single_file = file_path
        self.single_config = None
        self.check_ready_state()
        self.log_message(f"‚úì –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
    
    def configure_single_mapping(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not self.single_file or not self.google_url_input.text().strip():
            return
        
        try:
            self.log_message("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ –∏–∑ Excel
            excel_sheets = self.processor.get_excel_sheets(self.single_file)
            if not excel_sheets:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
            self.processor.connect_to_google_sheets(self.google_url_input.text().strip())
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ –∏–∑ Google
            google_sheets = self.processor.get_google_sheets()
            if not google_sheets:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã")
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –º–∞–ø–ø–∏–Ω–≥–∞
            dialog = MappingDialog(excel_sheets, google_sheets, self)
            if dialog.exec() == QDialog.DialogCode.Accepted:
                self.single_config = dialog.get_config()
                self.log_message("‚úì –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                self.check_ready_state()
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö:\n\n{e}")
    
    def start_single_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not self.single_file or not self.google_url_input.text().strip() or not self.single_config:
            return
        
        self.disable_ui()
        self.show_progress()
        
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
        self.log_text.clear()
        self.log_message(f"{'='*50}")
        self.log_message(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log_message(f"Excel —Ñ–∞–π–ª: {os.path.basename(self.single_file)}")
        self.log_message(f"Google –¢–∞–±–ª–∏—Ü–∞: {self.google_url_input.text().strip()}")
        self.log_message(f"{'='*50}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        self.worker_thread = WorkerThread(
            mode="single",
            excel_path=self.single_file,
            google_sheet_url=self.google_url_input.text().strip(),
            config=self.single_config
        )
        self.connect_worker_signals()
        self.worker_thread.start()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    def on_batch_files_dropped(self, files: List[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for file in files:
            if file not in self.batch_files:
                self.batch_files.append(file)
                self.files_list.addItem(os.path.basename(file))
        
        self.batch_mappings = []  # –°–±—Ä–æ—Å –º–∞–ø–ø–∏–Ω–≥–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.check_ready_state()
        self.log_message(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    def clear_batch_files(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        self.batch_files = []
        self.batch_mappings = []
        self.files_list.clear()
        self.check_ready_state()
    
    def remove_selected_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        for item in self.files_list.selectedItems():
            row = self.files_list.row(item)
            self.files_list.takeItem(row)
            if row < len(self.batch_files):
                self.batch_files.pop(row)
        
        self.batch_mappings = []  # –°–±—Ä–æ—Å –º–∞–ø–ø–∏–Ω–≥–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.check_ready_state()
    
    def configure_batch_mapping(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.batch_files or not self.google_url_input.text().strip():
            return
        
        try:
            self.log_message("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ...")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
            self.processor.connect_to_google_sheets(self.google_url_input.text().strip())
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ –∏–∑ Google
            google_sheets = self.processor.get_google_sheets()
            if not google_sheets:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã")
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –º–∞–ø–ø–∏–Ω–≥–∞
            dialog = BatchMappingDialog(self.batch_files, google_sheets, self)
            if dialog.exec() == QDialog.DialogCode.Accepted:
                self.batch_mappings = dialog.mappings
                self.log_message(f"‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(self.batch_mappings)} —Ñ–∞–π–ª–æ–≤")
                self.check_ready_state()
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö:\n\n{e}")
    
    def start_batch_processing(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.batch_mappings or not self.google_url_input.text().strip():
            return
        
        self.disable_ui()
        self.show_progress()
        
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
        self.log_text.clear()
        self.log_message(f"{'='*50}")
        self.log_message(f"–ù–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log_message(f"–§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(self.batch_mappings)}")
        self.log_message(f"Google –¢–∞–±–ª–∏—Ü–∞: {self.google_url_input.text().strip()}")
        self.log_message(f"{'='*50}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        self.worker_thread = WorkerThread(
            mode="batch",
            file_mappings=self.batch_mappings,
            google_sheet_url=self.google_url_input.text().strip()
        )
        self.connect_worker_signals()
        self.worker_thread.start()
    
    # –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
    def connect_worker_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        self.worker_thread.progress_update.connect(self.update_progress)
        self.worker_thread.log_message.connect(self.log_message)
        self.worker_thread.finished_successfully.connect(self.on_processing_finished)
        self.worker_thread.error_occurred.connect(self.on_processing_error)
    
    def disable_ui(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.tabs.setEnabled(False)
        self.google_url_input.setEnabled(False)
        self.single_mapping_btn.setEnabled(False)
        self.single_process_btn.setEnabled(False)
        self.batch_mapping_btn.setEnabled(False)
        self.batch_process_btn.setEnabled(False)
    
    def enable_ui(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.tabs.setEnabled(True)
        self.google_url_input.setEnabled(True)
        self.check_ready_state()
    
    def show_progress(self):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
    
    def hide_progress(self):
        """–°–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        self.progress_bar.setVisible(False)
        self.status_label.setText("")
    
    def update_progress(self, current: int, total: int, item_name: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        progress = int((current / total) * 100)
        self.progress_bar.setValue(progress)
        
        if self.tabs.currentIndex() == 0:  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            self.progress_bar.setFormat(f"{progress}% - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: {item_name}")
            self.status_label.setText(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {current} –∏–∑ {total}")
        else:  # –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            self.progress_bar.setFormat(f"{progress}% - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {item_name}")
            self.status_label.setText(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {current} –∏–∑ {total}")
    
    def log_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.append(f"[{timestamp}] {message}")
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        scrollbar = self.log_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def on_processing_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.progress_bar.setValue(100)
        self.progress_bar.setFormat("‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.status_label.setText("‚úì –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        self.log_message(f"{'='*50}")
        self.log_message(f"‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(3000, self.hide_progress)
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.enable_ui()
        
        # –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        mode = "–î–∞–Ω–Ω—ã–µ" if self.tabs.currentIndex() == 0 else "–í—Å–µ —Ñ–∞–π–ª—ã"
        QMessageBox.information(
            self,
            "–£—Å–ø–µ—à–Ω–æ",
            f"{mode} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—ã!"
        )
    
    def on_processing_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"""
        self.log_message(f"‚ùå –û–®–ò–ë–ö–ê: {error_message}")
        self.hide_progress()
        self.status_label.setText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.enable_ui()
        
        # –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        QMessageBox.critical(
            self,
            "–û—à–∏–±–∫–∞",
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n\n{error_message}"
        )


def main():
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle("Fusion")
    
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec())


if __name__ == "__main__":
    main()