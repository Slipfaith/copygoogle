import sys
import os
from datetime import datetime
from typing import List

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel, QLineEdit, QProgressBar,
    QListWidget, QListWidgetItem, QTabWidget, QMessageBox, QFileDialog,
    QDialog, QFrame, QSpacerItem, QSizePolicy
)
from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import QPalette, QColor

from app_logic import AppLogic
from config import BASE_DIR, create_sample_config
from dialogs import BatchMappingDialog, MappingDialog, DownloadDialog
import styles
from widgets import ClickableTextEdit, ModernDropArea
from log_service import LogService
from state import AppState
from utils import handle_errors


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.logic = AppLogic()
        self.state = AppState()
        self.logger = LogService(BASE_DIR)

        self.init_ui()
        self.connect_signals()
        self.check_config()

    def init_ui(self):
        self.setWindowTitle("Excel to Google Sheets")
        self.setFixedSize(600, 750)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        central_widget.setStyleSheet(styles.WINDOW_STYLE)
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(24)
        main_layout.setContentsMargins(32, 32, 32, 32)

        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏–∏
        self.create_header_section(main_layout)
        self.create_url_section(main_layout)
        self.create_tabs_section(main_layout)
        self.create_progress_section(main_layout)
        self.create_log_section(main_layout)

    def create_header_section(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = QFrame()
        header_layout = QVBoxLayout(header_frame)
        header_layout.setSpacing(8)
        header_layout.setContentsMargins(0, 0, 0, 0)

        title = QLabel("Excel ‚Üí Google Sheets")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet(styles.TITLE_LABEL_STYLE)

        subtitle = QLabel("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        subtitle.setAlignment(Qt.AlignmentFlag.AlignCenter)
        subtitle.setStyleSheet(styles.SUBTITLE_LABEL_STYLE)

        header_layout.addWidget(title)
        header_layout.addWidget(subtitle)

        parent_layout.addWidget(header_frame)

    def create_url_section(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –¥–ª—è –≤–≤–æ–¥–∞ URL Google –¢–∞–±–ª–∏—Ü—ã"""
        url_container = QFrame()
        url_container.setStyleSheet(styles.URL_CONTAINER_STYLE)
        url_container.setFixedHeight(100)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É

        url_layout = QVBoxLayout(url_container)
        url_layout.setSpacing(8)  # –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        url_layout.setContentsMargins(16, 12, 16, 12)  # –£–º–µ–Ω—å—à–∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        url_label = QLabel("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É")
        url_label.setStyleSheet(styles.URL_LABEL_STYLE)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.google_url_input = QLineEdit()
        self.google_url_input.setPlaceholderText("https://docs.google.com/spreadsheets/d/...")
        self.google_url_input.setStyleSheet(styles.URL_INPUT_STYLE)
        self.google_url_input.setFixedHeight(40)  # –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É –ø–æ–ª—è

        url_layout.addWidget(url_label)
        url_layout.addWidget(self.google_url_input)

        parent_layout.addWidget(url_container)

    def create_tabs_section(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å —Ç–∞–±–∞–º–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        tabs_container = QVBoxLayout()
        tabs_container.setSpacing(12)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        tabs_header = QHBoxLayout()
        tabs_header.setContentsMargins(0, 0, 0, 0)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç —Å–ª–µ–≤–∞
        tabs_header.addStretch()

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.download_btn = QPushButton("üíæ")
        self.download_btn.setEnabled(False)
        self.download_btn.setStyleSheet(styles.download_button())
        self.download_btn.setFixedSize(36, 36)
        self.download_btn.setToolTip("–°–∫–∞—á–∞—Ç—å Google —Ç–∞–±–ª–∏—Ü—É")

        tabs_header.addWidget(self.download_btn)

        # –°–∞–º–∏ —Ç–∞–±—ã
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet(styles.TAB_WIDGET_STYLE)
        self.tabs.setFixedHeight(380)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã
        single_tab = self.create_single_tab()
        batch_tab = self.create_batch_tab()

        self.tabs.addTab(single_tab, "üìÑ –û–¥–∏–Ω —Ñ–∞–π–ª")
        self.tabs.addTab(batch_tab, "üìÅ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")

        tabs_container.addLayout(tabs_header)
        tabs_container.addWidget(self.tabs)

        parent_layout.addLayout(tabs_container)

    def create_single_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–± –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(20)
        layout.setContentsMargins(20, 20, 20, 20)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        drop_container = QHBoxLayout()
        drop_container.addStretch()

        self.single_drop_area = ModernDropArea(accept_multiple=False)
        self.single_drop_area.setFixedSize(360, 100)

        drop_container.addWidget(self.single_drop_area)
        drop_container.addStretch()

        layout.addLayout(drop_container)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QVBoxLayout()
        buttons_layout.setSpacing(12)

        self.single_mapping_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥")
        self.single_mapping_btn.setEnabled(False)
        self.single_mapping_btn.setStyleSheet(styles.secondary_button())
        self.single_mapping_btn.setFixedHeight(44)

        self.single_process_btn = QPushButton("üöÄ –ù–∞—á–∞—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.single_process_btn.setEnabled(False)
        self.single_process_btn.setStyleSheet(styles.success_button())
        self.single_process_btn.setFixedHeight(44)

        buttons_layout.addWidget(self.single_mapping_btn)
        buttons_layout.addWidget(self.single_process_btn)

        layout.addLayout(buttons_layout)
        layout.addStretch()

        return tab

    def create_batch_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–± –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(16)
        layout.setContentsMargins(20, 20, 20, 20)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        drop_container = QHBoxLayout()
        drop_container.addStretch()

        self.batch_drop_area = ModernDropArea(accept_multiple=True)
        self.batch_drop_area.setFixedSize(360, 80)

        drop_container.addWidget(self.batch_drop_area)
        drop_container.addStretch()

        layout.addLayout(drop_container)

        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        self.files_list = QListWidget()
        self.files_list.setFixedHeight(80)
        self.files_list.setStyleSheet(styles.FILES_LIST_STYLE)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        list_buttons_layout = QHBoxLayout()
        list_buttons_layout.setSpacing(8)

        self.clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_btn.setStyleSheet(styles.small_button())
        self.clear_btn.setFixedHeight(32)

        self.remove_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        self.remove_btn.setStyleSheet(styles.small_button())
        self.remove_btn.setFixedHeight(32)

        list_buttons_layout.addWidget(self.clear_btn)
        list_buttons_layout.addWidget(self.remove_btn)
        list_buttons_layout.addStretch()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        main_buttons_layout = QVBoxLayout()
        main_buttons_layout.setSpacing(12)

        self.batch_mapping_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥")
        self.batch_mapping_btn.setEnabled(False)
        self.batch_mapping_btn.setStyleSheet(styles.secondary_button())
        self.batch_mapping_btn.setFixedHeight(44)

        self.batch_process_btn = QPushButton("üöÄ –ù–∞—á–∞—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.batch_process_btn.setEnabled(False)
        self.batch_process_btn.setStyleSheet(styles.success_button())
        self.batch_process_btn.setFixedHeight(44)

        main_buttons_layout.addWidget(self.batch_mapping_btn)
        main_buttons_layout.addWidget(self.batch_process_btn)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        layout.addWidget(self.files_list)
        layout.addLayout(list_buttons_layout)
        layout.addLayout(main_buttons_layout)
        layout.addStretch()

        return tab

    def create_progress_section(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        progress_container = QVBoxLayout()
        progress_container.setSpacing(8)

        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setStyleSheet(styles.PROGRESS_BAR_STYLE)
        self.progress_bar.setFixedHeight(28)

        self.status_label = QLabel("")
        self.status_label.setStyleSheet(styles.STATUS_LABEL_STYLE)
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.hide()

        progress_container.addWidget(self.progress_bar)
        progress_container.addWidget(self.status_label)

        parent_layout.addLayout(progress_container)

    def create_log_section(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ª–æ–≥–æ–≤"""
        log_container = QVBoxLayout()
        log_container.setSpacing(8)

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
        self.toggle_log_btn = QPushButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª")
        self.toggle_log_btn.setStyleSheet(styles.small_button())
        self.toggle_log_btn.setFixedHeight(32)

        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.log_text = ClickableTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setFixedHeight(140)
        self.log_text.setStyleSheet(styles.LOG_TEXT_STYLE)
        self.log_text.hide()

        log_container.addWidget(self.toggle_log_btn)
        log_container.addWidget(self.log_text)

        parent_layout.addLayout(log_container)

    def connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫ —Å–ª–æ—Ç–∞–º"""
        # URL –∏ –∑–∞–≥—Ä—É–∑–∫–∞
        self.google_url_input.textChanged.connect(self.check_ready_state)
        self.download_btn.clicked.connect(self.download_google_sheet)

        # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
        self.single_drop_area.file_dropped.connect(self.on_single_file_dropped)
        self.single_mapping_btn.clicked.connect(self.configure_single_mapping)
        self.single_process_btn.clicked.connect(self.start_single_processing)

        # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self.batch_drop_area.files_dropped.connect(self.on_batch_files_dropped)
        self.clear_btn.clicked.connect(self.clear_batch_files)
        self.remove_btn.clicked.connect(self.remove_selected_files)
        self.batch_mapping_btn.clicked.connect(self.configure_batch_mapping)
        self.batch_process_btn.clicked.connect(self.start_batch_processing)

        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.toggle_log_btn.clicked.connect(self.toggle_log)
        self.tabs.currentChanged.connect(self.check_ready_state)

    def toggle_log(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∂—É—Ä–Ω–∞–ª–∞"""
        if self.log_text.isVisible():
            self.log_text.hide()
            self.toggle_log_btn.setText("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª")
        else:
            self.log_text.show()
            self.toggle_log_btn.setText("üìã –°–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª")

    @handle_errors
    def check_config(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        config_path = BASE_DIR / "config.yaml"
        if not config_path.exists():
            self.log_message("‚ö†Ô∏è –°–æ–∑–¥–∞—é config.yaml...")
            create_sample_config(config_path)
            self.log_message("‚úì –°–æ–∑–¥–∞–Ω config.yaml")

        creds_path = BASE_DIR / "credentials.json"
        if not creds_path.exists():
            self.log_message("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª credentials.json!")

    def check_ready_state(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏"""
        has_google_url = bool(self.google_url_input.text().strip())
        current_tab = self.tabs.currentIndex()

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.download_btn.setEnabled(has_google_url)

        if current_tab == 0:  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
            has_file = self.state.single_file is not None
            self.single_mapping_btn.setEnabled(has_google_url and has_file)
            self.single_process_btn.setEnabled(
                has_google_url and has_file and self.state.single_config is not None
            )
        else:  # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            has_files = len(self.state.batch_files) > 0
            self.batch_mapping_btn.setEnabled(has_google_url and has_files)
            self.batch_process_btn.setEnabled(
                has_google_url and has_files and len(self.state.batch_mappings) > 0
            )

    @handle_errors
    def download_google_sheet(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç Google —Ç–∞–±–ª–∏—Ü—É"""
        google_url = self.google_url_input.text().strip()
        if not google_url:
            return

        self.log_message("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤...")
        sheet_names = self.logic.get_google_sheets(google_url)
        if not sheet_names:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç—ã Google –¢–∞–±–ª–∏—Ü—ã")

        dialog = DownloadDialog(sheet_names, self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            selected_sheets = dialog.get_selection()
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫",
                f"{self.logic.get_google_sheet_title()}.xlsx",
                "Excel Files (*.xlsx)"
            )
            if file_path:
                self.disable_ui()
                self.show_progress()
                self.log_text.clear()
                self.logic.start_download(
                    google_url,
                    file_path,
                    selected_sheets,
                    self.update_progress,
                    self.log_message,
                    self.on_processing_finished,
                    self.on_processing_error,
                )

    def on_single_file_dropped(self, file_path: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.state.single_file = file_path
        self.state.single_config = None
        self.check_ready_state()
        self.log_message(f"‚úì –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")

    @handle_errors
    def configure_single_mapping(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not self.state.single_file or not self.google_url_input.text().strip():
            return

        self.log_message("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞...")
        excel_sheets = self.logic.get_excel_sheets(self.state.single_file)
        if not excel_sheets:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç—ã Excel")

        self.log_message("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º...")
        google_sheets = self.logic.get_google_sheets(self.google_url_input.text().strip())
        if not google_sheets:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç—ã Google")

        self.log_message("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        dialog = MappingDialog(excel_sheets, google_sheets, self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.state.single_config = dialog.get_config()
            self.log_message("‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.check_ready_state()

    def start_single_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not self.state.single_file or not self.google_url_input.text().strip() or not self.state.single_config:
            return

        self.disable_ui()
        self.show_progress()
        self.log_text.clear()

        header = [
            f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%H:%M:%S')}",
            f"üìÑ –§–∞–π–ª: {os.path.basename(self.state.single_file)}",
            f"üîó –¢–∞–±–ª–∏—Ü–∞: {self.google_url_input.text().strip()[:50]}..."
        ]
        self.logger.open(header)

        self.logic.start_single_processing(
            self.state.single_file,
            self.google_url_input.text().strip(),
            self.state.single_config,
            self.update_progress,
            self.log_message,
            self.on_processing_finished,
            self.on_processing_error,
        )

    def on_batch_files_dropped(self, files: List[str]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤"""
        added = 0
        for file in files:
            if file not in self.state.batch_files:
                self.state.batch_files.append(file)
                item = QListWidgetItem(f"üìÑ {os.path.basename(file)}")
                item.setData(Qt.ItemDataRole.UserRole, file)
                self.files_list.addItem(item)
                added += 1

        self.state.batch_mappings = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
        self.check_ready_state()

        if added > 0:
            self.log_message(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {added}")

    def clear_batch_files(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.state.batch_files = []
        self.state.batch_mappings = []
        self.files_list.clear()
        self.batch_drop_area.reset()
        self.check_ready_state()
        self.log_message("üóëÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")

    def remove_selected_files(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selected_items = self.files_list.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        removed = 0
        for item in selected_items:
            file_path = item.data(Qt.ItemDataRole.UserRole)
            if file_path in self.state.batch_files:
                self.state.batch_files.remove(file_path)
                removed += 1
            self.files_list.takeItem(self.files_list.row(item))

        self.state.batch_mappings = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
        if not self.state.batch_files:
            self.batch_drop_area.reset()

        self.check_ready_state()
        if removed > 0:
            self.log_message(f"‚ûñ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {removed}")

    @handle_errors
    def configure_batch_mapping(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.state.batch_files or not self.google_url_input.text().strip():
            return

        self.log_message("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º...")
        google_sheets = self.logic.get_google_sheets(self.google_url_input.text().strip())
        if not google_sheets:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç—ã Google")

        self.log_message("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        dialog = BatchMappingDialog(self.state.batch_files, google_sheets, self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.state.batch_mappings = dialog.mappings
            self.log_message(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(self.state.batch_mappings)} —Ñ–∞–π–ª–æ–≤")
            self.check_ready_state()

    def start_batch_processing(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.state.batch_mappings or not self.google_url_input.text().strip():
            return

        self.disable_ui()
        self.show_progress()
        self.log_text.clear()

        header = [
            f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%H:%M:%S')}",
            f"üìÅ –§–∞–π–ª–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(self.state.batch_mappings)}",
            f"üîó –¢–∞–±–ª–∏—Ü–∞: {self.google_url_input.text().strip()[:50]}..."
        ]
        self.logger.open(header)

        self.logic.start_batch_processing(
            self.state.batch_mappings,
            self.google_url_input.text().strip(),
            self.update_progress,
            self.log_message,
            self.on_processing_finished,
            self.on_processing_error,
        )

    def disable_ui(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.tabs.setEnabled(False)
        self.google_url_input.setEnabled(False)
        self.download_btn.setEnabled(False)

    def enable_ui(self):
        """–í–∫–ª—é—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.tabs.setEnabled(True)
        self.google_url_input.setEnabled(True)
        self.check_ready_state()

    def show_progress(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å"""
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.show()
        if not self.log_text.isVisible():
            self.toggle_log()

    def hide_progress(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å"""
        self.progress_bar.setVisible(False)
        self.status_label.hide()

    def update_progress(self, current: int, total: int, item_name: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        progress = int((current / total) * 100) if total > 0 else 0
        self.progress_bar.setValue(progress)
        self.progress_bar.setFormat(f"{progress}% - {item_name}")

        if self.tabs.currentIndex() == 0:
            self.status_label.setText(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {current}/{total}")
        else:
            self.status_label.setText(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {current}/{total}")

    def log_message(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∂—É—Ä–Ω–∞–ª"""
        formatted = self.logger.log(message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
        if message.startswith("üìã –°—Å—ã–ª–∫–∞:"):
            url = message.split(": ", 1)[1]
            html_message = f'{formatted.split("] ", 1)[0]}] üìã –°—Å—ã–ª–∫–∞: <a href="{url}">{url}</a>'
            self.log_text.append(html_message)
        elif message.startswith("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:"):
            path = message.split(": ", 1)[1]
            html_message = f'{formatted.split("] ", 1)[0]}] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <a href="file://{path}">{path}</a>'
            self.log_text.append(html_message)
        else:
            self.log_text.append(formatted)

        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É
        scrollbar = self.log_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def on_processing_finished(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.progress_bar.setValue(100)
        self.progress_bar.setFormat("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        self.status_label.setText("üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        self.logger.close()
        self.log_message("üéâ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(3000, self.hide_progress)
        self.enable_ui()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        msg = QMessageBox(self)
        msg.setWindowTitle("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        msg.setText("üéâ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        msg.setInformativeText(
            f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.\n"
            f"–ñ—É—Ä–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {self.logger.log_file_path.name if self.logger.log_file_path else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}"
        )
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()

    def on_processing_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.log_message(f"üí• –û–®–ò–ë–ö–ê: {error_message}")
        self.hide_progress()
        self.logger.close()
        self.enable_ui()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        msg = QMessageBox(self)
        msg.setWindowTitle("–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        msg.setText("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        msg.setInformativeText(
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{error_message}\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–µ\n"
            "‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Excel —Ñ–∞–π–ª\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ credentials.json\n"
            "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã Google API"
        )
        msg.setIcon(QMessageBox.Icon.Critical)
        msg.setDetailedText(error_message)
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)
    app.setStyle("Fusion")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
    palette = QPalette()
    palette.setColor(QPalette.ColorRole.Window, QColor(255, 255, 255))
    palette.setColor(QPalette.ColorRole.WindowText, QColor(31, 41, 55))
    palette.setColor(QPalette.ColorRole.Base, QColor(249, 250, 251))
    palette.setColor(QPalette.ColorRole.AlternateBase, QColor(229, 231, 235))
    palette.setColor(QPalette.ColorRole.Text, QColor(31, 41, 55))
    palette.setColor(QPalette.ColorRole.Button, QColor(249, 250, 251))
    palette.setColor(QPalette.ColorRole.ButtonText, QColor(31, 41, 55))
    palette.setColor(QPalette.ColorRole.BrightText, QColor(255, 255, 255))
    palette.setColor(QPalette.ColorRole.Link, QColor(37, 99, 235))
    palette.setColor(QPalette.ColorRole.Highlight, QColor(37, 99, 235))
    palette.setColor(QPalette.ColorRole.HighlightedText, QColor(255, 255, 255))
    app.setPalette(palette)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
    window = MainWindow()
    window.show()

    sys.exit(app.exec())


if __name__ == "__main__":
    main()